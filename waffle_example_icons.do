	
	* Install packages (One time only)
	* ssc install palettes, replace
	* ssc install colrspace, replace
	* ssc install schemepack, replace
	
	
	* Example generated by -dataex-. For more info, type help dataex
	clear
	input str25 var1 float var2
	"Category 1" 35
	"Category 2" 40
	"Category 3" 25
	end
	
	compress
	
	generate markerM = "{fontface Travelcons:q}"
	generate markerF = "{fontface Travelcons:w}"

	generate malecolor = "255 0 149"
	generate femalecolor = "0 133 206"

	
	**** Note: Run in one go from this point onwards ****
	
	colorpalette tableau, nograph 				// Loading color values in a local to be used ahead				
	
	* This loop starts on the x-axis value of 1 and will keep repeating till all
	* values of the loop are covered. The value that this loop works on is picked 
	* from var2 and we index the first observation of that variable.
	
	* The loop itself is automating the task by taking each value and making a list
	* of commands that will feed into the twoway plot at the end
	
	* Within the loop we have a condition where
	* we change this value to 1 if it is taking a value greater than 5. We do this
	* because we want to keep only 5 columns for the visualization for each group.
	* If we wanted 6 columns then we change the if condition to take the value 6
		
	local i = 1
	forvalues j = 1/`=var2[1]' {
		
		local yval : display ceil(`j'/5) 		// Acquiring the ceiling value for a y axis value
		local odd : display mod(`j',2) 			// Indicator for whether the number in loop is odd or even	
		
		* The if condition below checks to see whether the value is odd or even.
		* If the value is odd, then the male marker symbol is assigned, otherwise female icon.
		
		if `odd' == 1 {
			local point1 "`point1' (scatteri `yval' `i' "`=markerF[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p1)'"))" 
		}
		
		else {
			
			local point1 "`point1' (scatteri `yval' `i' "`=markerM[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p1)'"))"
			
		}
		
		if `i' == 5 {
			local i = 1
		}
		
		else {
			local ++i 
		}
		
	}
	
	
	* This second loop is doing the same as above but starts from the x-axis value
	* of 7 so that we have a gap of one point between the first and second group.
	* The first group x values range from 1 to 5 and the second group ranges from
	* 7 to 11
	
	local i = 7
	forvalues j = 1/`=var2[2]' {
		
		local yval : display ceil(`j'/5)
		local odd : display mod(`j',2)
		
		if `odd' == 1 {
			local point2 "`point2' (scatteri `yval' `i' "`=markerF[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p9)'"))"
		}
		
		else {
			
			local point2 "`point2' (scatteri `yval' `i' "`=markerM[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p9)'"))"
			
		}
		
		if `i' == 11 {
			local i = 7
		}
		
		else {
			local ++i 
		}
		
	}
	
	* This third loop is doing the same as above but starts from the x-axis value
	* of 13 so that we have a gap of one point between the second and third group.
	* The second group x values range from 7 to 11 and the third group ranges from
	* 13 to 17
	
	local i = 13
	forvalues j = 1/`=var2[3]' {
		
		local yval : display ceil(`j'/5)
		local odd : display mod(`j',2)
		
		if `odd' == 1 {
			local point3 "`point3' (scatteri `yval' `i' "`=markerF[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p4)'"))"
		}
		
		else {
			
			local point3 "`point3' (scatteri `yval' `i' "`=markerM[1]'", mlabpos(0) ms(i) mlabsize(5) mlabcolor("`r(p4)'"))"
			
		}
		
		if `i' == 17 {
			local i = 13
		}
		
		else {
			local ++i 
		}
		
	}			
	
	
	* This then takes the input generated above to join together all diagrams
	twoway `point1' `point2' `point3' ///
			///
			(scatteri 0.25 0.5 0.25 5.5, recast(line) lcolor(black)) ///
			(scatteri -0.5 3 "`=var2[1]'%", mlabposition(0) mlabsize(8) ms(i)) ///
			(scatteri -1.5 3 "Category 1", mlabposition(0) mlabsize(3.25) ms(i)) ///
			///
			(scatteri 0.25 6.5 0.25 11.5, recast(line) lcolor(black)) ///
			(scatteri -0.5 9 "`=var2[2]'%", mlabposition(0) mlabsize(8) ms(i)) ///
			(scatteri -1.5 9 "Category 2", mlabposition(0) mlabsize(3.25) ms(i)) ///
			///
			(scatteri 0.25 12.5 0.25 17.5, recast(line) lcolor(black)) ///
			(scatteri -0.5 15 "`=var2[3]'%", mlabposition(0) mlabsize(8) ms(i)) ///
			(scatteri -1.5 15 "Category 3", mlabposition(0) mlabsize(3.25) ms(i)) ///
			///
			(scatteri -2.5 6.5 -2.5 17.5, recast(line) lcolor(black)) ///
			(scatteri -2.75 6.5 -2.5 6.5, recast(line) lcolor(black)) ///
			(scatteri -2.75 17.5 -2.5 17.5, recast(line) lcolor(black)) ///
			(scatteri -3.5 12 "65%", mlabposition(0) mlabsize(8) ms(i)) ///
			(scatteri -4.5 12 "Overall", mlabposition(0) mlabsize(3.5) ms(i)) ///
			///				
			, ///
			title("{bf}Use of Icons in Stata Visualization", pos(11) size(4)) ///
			legend(off) scheme(white_tableau) ///
			ylabel(, nogrid) ///
			xlabel(, nogrid) ///
			yscale(off) ///
			xscale(off range(-2 17))
		
	
	* Exporting the graph
	graph export "./visuals/waffle_example_icons.png", as(png) width(3840) replace
				
				
				
